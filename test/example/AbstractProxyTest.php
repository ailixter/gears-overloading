<?php

use Ailixter\Gears\Example\TestProxy;

/**
 * Generated by PHPUnit_SkeletonGenerator.
 */
class AbstractProxyTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var \TestProxy
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new TestProxy(new TestClass());
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     */
    public function test__call()
    {
        self::assertEquals('public', $this->object->publicFn());
    }

    /**
     * @expectedException \Ailixter\Gears\Exceptions\MethodException
     */
    public function test__call_protected()
    {
        self::assertThat($this->object->protectedFn());
    }

    /**
     * @expectedException \Ailixter\Gears\Exceptions\MethodException
     */
    public function test__call_unknown()
    {
        self::assertThat($this->object->unknownFn());
    }

    /**
     */
    public function test__call_param()
    {
        self::assertEquals(123, $this->object->returnParam(123));
    }

    /**
     */
    public function test__call_publicMy()
    {
        self::assertEquals('my public', $this->object->publicMy());
    }

    /**
     * @expectedException \Ailixter\Gears\Exceptions\MethodException
     */
    public function test__call_protectedMy()
    {
        self::assertThat($this->object->protectedMy());
    }

    /**
     * @ expectedException \Ailixter\Gears\Exceptions\MethodException
     */
    public function test__callProtectedMy()
    {
        self::assertNotEmpty($this->object->callProtectedMy());
    }

    /**
     */
    public function test__get()
    {
        self::assertEquals('public', $this->object->pub);
    }

    /**
     * @expectedException PHPUnit_Framework_Error
     */
    public function test__get_unknown()
    {
        self::assertThat($this->object->unknown);
    }

    /**
     * @expected ??? Fatal Error
     *
      public function test__get_protected () {
      self::assertThat($this->object->pro);
      }
      /** */

    /**
     */
    public function test__get_myPub()
    {
        self::assertEquals('my public', $this->object->myPub);
    }

    /**
     * @expectedException PHPUnit_Framework_Error
     */
    public function test__get_myPro()
    {
        self::assertEquals('my protected', $this->object->myPro);
    }

    /**
     */
    public function test__set()
    {
        $this->object->pub = 123;
        self::assertEquals(123, $this->object->pub);
        self::assertEquals($this->object->pub, $this->object->proxiedObject->pub);
    }

    /**
     * @expected ??? Fatal Error
     *
      public function test__set_protected () {
      $this->object->pro = 123;
      }
      /** */

    /**
     */
    public function test__set_unknown()
    {
        $this->object->unknown = 123;
        self::assertEquals(123, $this->object->unknown);
        self::assertEquals($this->object->unknown, $this->object->proxiedObject->unknown);
    }

    /**
     */
    public function test__isset()
    {
        self::assertTrue(isset($this->object->pub));
    }

    /**
     */
    public function test__unset()
    {
        unset($this->object->pub);
        self::assertFalse(isset($this->object->pub));
    }

}
