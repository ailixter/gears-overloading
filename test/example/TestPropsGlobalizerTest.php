<?php

namespace Ailixter\Gears\Example;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-10-23 at 14:34:11.
 */
class TestPropsGlobalizerTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var TestPropsGlobalizer
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = 'TestPropsGlobalizer';
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @expectedException Ailixter\Gears\Exceptions\MethodException
     */
    public function testUndefinedFn()
    {
        self::assertEquals('public', TestPropsGlobalizer::publicFn());
    }

    public function testPublicFn()
    {
        self::assertInternalType('array', TestPropsGlobalizer::propertyGetValue('calcPro'));
    }

    /**
     */
    public function testGetProxiedObject()
    {
        self::assertInstanceOf('Ailixter\Gears\Example\TestStrictProps',
            TestPropsGlobalizer::getProxiedObject());
    }
    
    /**
     */
    public function testProtectedProp()
    {
        self::assertEquals('my protected', TestPropsGlobalizer::getProxiedObject()->myPro);
    }

    /**
     * @expectedException Ailixter\Gears\Exceptions\PropertyException
     */
    public function testUndefined()
    {
        self::assertNotEmpty(TestPropsGlobalizer::getProxiedObject()->undefined);
    }

    public function test__set()
    {
        $expectedVars = TestPropsGlobalizer::getProxiedObject()->expectedVars();
        foreach ($expectedVars as $key => $typval) {
            list($type, $value) = $typval;
            $value .= '*';
            TestPropsGlobalizer::getProxiedObject()->$key = $value;
            self::assertEquals($value, TestPropsGlobalizer::getProxiedObject()->$key);
            self::assertInternalType($type, TestPropsGlobalizer::getProxiedObject()->propertyGetValue($key));
        }
    }

}
